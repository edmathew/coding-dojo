apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'application'

clean {
  delete distribution_folder
  delete fileTree( dir: reports_folder, include: '**/*' )
}

sourceSets {
  main {
    java {
      srcDir sources_folder
    }
    resources {
      srcDir resources_folder
    }
  }
}

task initialize( description : 'Creates working folders: build/ and distribution/.' ) << {
  def build_directory = new File( build_folder )
  build_directory.mkdirs()

  def distribution_directory = new File( distribution_folder )
  distribution_directory.mkdirs()
}

task legacyJRE( description : 'Collects JARs to set as bootstrap classes before compiling.' ) {
  def files = []
  def tree  = fileTree( dir: legacy_jre , include: '**/*.jar' )
  tree.each { File file ->
    files << file
  }

  ext.bootClasspath = files.join( ';' )
}

task compile( description : 'Prepares bootstrap classes and builds *.class files.', dependsOn : ':compileJava' ) << {
}

sourceCompatibility = source_version
targetCompatibility = target_version

dependencies {
  compile fileTree( dir: vendors_folder, include: '**/*.jar' )
}

compileJava {
  classpath            = configurations.compile
  options.compilerArgs = [ '-Xlint:unchecked' ]
  options.encoding     = 'UTF-8'
  options.incremental  = true
  options.fork         = true

  if ( sourceCompatibility == '1.6' ) {
    options.bootClasspath = legacyJRE.bootClasspath
  }
}

def manifestLibraries = copySpec {
  from configurations.runtime.files
  into '/libraries'
  exclude '**/*-javadoc.jar'
  exclude '**/*-sources.jar'
}

jar {
  // JOCAMO - 2015.06.16: How to exclude *-javadoc.jar and *-sources.jar from manifest classpath :?:
  def manifestClassPath = configurations.runtime.files.collect { 'libraries/' + it.name }.join( ' ' )

  archiveName = application_file + '.' + extension
  manifest {
    attributes ( 'Implementation-Title'    : application_name                     ,
                 'Implementation-Version'  : application_version                  ,
                 'Implementation-Vendor'   : application_vendor                   ,
                 'Implementation-Timestamp': new Date()                           ,
                 'Built-Date'              : new Date()                           ,
                 'Built-JDK'               : System.getProperty( 'java.version' ) ,
                 'Built-By'                : System.getProperty( 'user.name'    ) ,
                 'Main-Class'              : application_class                    ,
                 'Class-Path'              : manifestClassPath                    )
  }
}

task distribute( description : 'Creates a final JAR file for distribution.', dependsOn : [ ':compile', ':jar' ], type : Copy ) {
  from build_folder + '/libs'
  with manifestLibraries
  into distribution_folder
}

task launch( description : 'Launches the application, without arguments.', dependsOn : ':distribute', type : JavaExec ) {
  workingDir = distribution_folder
  main       = application_class
  // classpath  = sourceSets.main.runtimeClasspath
  // classpath  = configurations.runtime
  classpath  = fileTree( dir: distribution_folder , include: '*.jar' )

  jvmArgs = [ '-Dfile.encoding=UTF-8' ]
  if ( project.hasProperty( 'application_argument' ) ) {
    args = [ application_argument ]
  }
}

defaultTasks ':distribute'

mainClassName = application_class
